{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_INVEST } from \"./invest-actions\";\nimport invest from \"../model/invest\";\nimport moment from 'moment';\nvar initialState = {\n  investments: {}\n};\nexport default (function () {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n  var dateTime = new moment(new Date()).format('YYYY-MM-DD hh:mm:00');\n\n  switch (action.type) {\n    case ADD_INVEST:\n      var addedInvestment = action.investData;\n\n      if (state.investments) {\n        var _newInvestment = new invest(dateTime, state.investments[addedInvestment.id].shares + 1, state.investments[addedInvestment.id].price + addedInvestment.price);\n      } else {\n        var _newInvestment2 = new invest(dateTime, addedInvestment.shares, addedInvestment.price);\n      }\n\n      return _objectSpread(_objectSpread({}, state), {}, {\n        investments: _objectSpread(_objectSpread({}, state.investments), {}, _defineProperty({}, addedInvestment.id, newInvestment))\n      });\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/manik/Documents/react-native/Investment_app/store/invest-reducer.js"],"names":["ADD_INVEST","invest","moment","initialState","investments","state","action","dateTime","Date","format","type","addedInvestment","investData","newInvestment","id","shares","price"],"mappings":";;;;;;AAAA,SAASA,UAAT;AACA,OAAOC,MAAP;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,IAAMC,YAAY,GAAG;AACnBC,EAAAA,WAAW,EAAE;AADM,CAArB;AAIA,gBAAe,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBF,YAAyB;AAAA,MAAXG,MAAW;AAE/C,MAAMC,QAAQ,GAAG,IAAIL,MAAJ,CAAW,IAAIM,IAAJ,EAAX,EAAuBC,MAAvB,CAA8B,qBAA9B,CAAjB;;AAEA,UAAQH,MAAM,CAACI,IAAf;AACE,SAAKV,UAAL;AACE,UAAMW,eAAe,GAAGL,MAAM,CAACM,UAA/B;;AAEA,UAAIP,KAAK,CAACD,WAAV,EAAuB;AAErB,YAAMS,cAAa,GAAG,IAAIZ,MAAJ,CACpBM,QADoB,EAEpBF,KAAK,CAACD,WAAN,CAAkBO,eAAe,CAACG,EAAlC,EAAsCC,MAAtC,GAA+C,CAF3B,EAGpBV,KAAK,CAACD,WAAN,CAAkBO,eAAe,CAACG,EAAlC,EAAsCE,KAAtC,GAA8CL,eAAe,CAACK,KAH1C,CAAtB;AAKD,OAPD,MASK;AACH,YAAMH,eAAa,GAAG,IAAIZ,MAAJ,CAAWM,QAAX,EAAqBI,eAAe,CAACI,MAArC,EAA6CJ,eAAe,CAACK,KAA7D,CAAtB;AACD;;AAGD,6CACKX,KADL;AAEED,QAAAA,WAAW,kCAAMC,KAAK,CAACD,WAAZ,2BAA0BO,eAAe,CAACG,EAA1C,EAA+CD,aAA/C;AAFb;;AAMF;AACE,aAAOR,KAAP;AAzBJ;AA2BD,CA/BD","sourcesContent":["import { ADD_INVEST } from './invest-actions';\r\nimport invest from '../model/invest';\r\nimport moment from 'moment'\r\n\r\nconst initialState = {\r\n  investments: {}\r\n};\r\n\r\nexport default (state = initialState, action) => {\r\n\r\n  const dateTime = new moment(new Date()).format('YYYY-MM-DD hh:mm:00')\r\n\r\n  switch (action.type) {\r\n    case ADD_INVEST:\r\n      const addedInvestment = action.investData\r\n\r\n      if (state.investments) {\r\n        // if the investment exists\r\n        const newInvestment = new invest(\r\n          dateTime, \r\n          state.investments[addedInvestment.id].shares + 1,\r\n          state.investments[addedInvestment.id].price + addedInvestment.price\r\n          )\r\n      }\r\n\r\n      else {\r\n        const newInvestment = new invest(dateTime, addedInvestment.shares, addedInvestment.price);\r\n      }\r\n\r\n\r\n      return {\r\n        ...state, \r\n        investments: {...state.investments, [addedInvestment.id]: newInvestment }\r\n      };\r\n\r\n    // default switch case\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}