{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\manik\\\\Documents\\\\react-native\\\\Investment_app\\\\node_modules\\\\react-navigation-header-buttons\\\\src\\\\overflowMenu\\\\vendor\\\\MenuItem.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }\n\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Touchable from 'react-native-platform-touchable';\nvar rippleConfig = Touchable.Ripple('rgba(0, 0, 0, .32)', false);\nexport var MenuItem = function (_React$Component) {\n  _inherits(MenuItem, _React$Component);\n\n  var _super = _createSuper(MenuItem);\n\n  function MenuItem() {\n    _classCallCheck(this, MenuItem);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(MenuItem, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          icon = _this$props.icon,\n          title = _this$props.title,\n          disabled = _this$props.disabled,\n          onPress = _this$props.onPress,\n          style = _this$props.style,\n          titleStyle = _this$props.titleStyle,\n          testID = _this$props.testID;\n      var titleColor = disabled ? styles.disabledColor : styles.normalColor;\n      return React.createElement(Touchable, {\n        background: rippleConfig,\n        style: [styles.container, style],\n        onPress: onPress,\n        disabled: disabled,\n        testID: testID,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 7\n        }\n      }, React.createElement(View, {\n        style: styles.row,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 9\n        }\n      }, React.isValidElement(icon) && React.createElement(View, {\n        style: [styles.item, styles.icon],\n        pointerEvents: \"box-none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 13\n        }\n      }, icon), React.createElement(View, {\n        style: [styles.item, styles.content, icon != null ? styles.widthWithIcon : undefined],\n        pointerEvents: \"none\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }\n      }, React.createElement(Text, {\n        numberOfLines: 1,\n        style: [styles.title, titleColor, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }, title))));\n    }\n  }]);\n\n  return MenuItem;\n}(React.Component);\nvar minWidth = 112;\nvar maxWidth = 280;\nvar iconWidth = 25;\nvar styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth: minWidth,\n    maxWidth: maxWidth,\n    height: 48,\n    justifyContent: 'center'\n  },\n  row: {\n    flexDirection: 'row'\n  },\n  icon: {\n    width: iconWidth\n  },\n  title: {\n    fontSize: 16\n  },\n  item: {\n    marginHorizontal: 8\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48)\n  },\n  disabledColor: {\n    color: 'rgba(0, 0, 0, 0.32)'\n  },\n  normalColor: {\n    color: 'rgba(0, 0, 0, 0.87)'\n  }\n});","map":{"version":3,"sources":["C:/Users/manik/Documents/react-native/Investment_app/node_modules/react-navigation-header-buttons/src/overflowMenu/vendor/MenuItem.js"],"names":["React","Touchable","rippleConfig","Ripple","MenuItem","props","icon","title","disabled","onPress","style","titleStyle","testID","titleColor","styles","disabledColor","normalColor","container","row","isValidElement","item","content","widthWithIcon","undefined","Component","minWidth","maxWidth","iconWidth","StyleSheet","create","paddingHorizontal","height","justifyContent","flexDirection","width","fontSize","marginHorizontal","color"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { View, StyleSheet, Text } from 'react-native';\nimport type { ViewStyleProp } from 'react-native/Libraries/StyleSheet/StyleSheet';\nimport Touchable from 'react-native-platform-touchable';\n\nexport type Props = {|\n  /**\n   * Title text for the `MenuItem`.\n   */\n  title: string,\n  /**\n   * Icon to display for the `MenuItem`.\n   */\n  icon?: ?React.Node,\n  /**\n   * Whether the 'item' is disabled. A disabled 'item' is greyed out and `onPress` is not called on touch.\n   */\n  disabled?: boolean,\n  /**\n   * Function to execute on press.\n   */\n  onPress: ?() => any,\n  /**\n   * @optional\n   */\n  style?: ViewStyleProp,\n  titleStyle?: ViewStyleProp,\n  /**\n   * TestID used for testing purposes\n   */\n  testID?: string,\n|};\n\n/**\n * A component to show a single list item inside a Menu.\n */\nconst rippleConfig = Touchable.Ripple('rgba(0, 0, 0, .32)', false);\n\nexport class MenuItem extends React.Component<Props> {\n  render() {\n    const { icon, title, disabled, onPress, style, titleStyle, testID } = this.props;\n\n    const titleColor = disabled ? styles.disabledColor : styles.normalColor;\n\n    return (\n      <Touchable\n        background={rippleConfig}\n        style={[styles.container, style]}\n        onPress={onPress}\n        disabled={disabled}\n        testID={testID}\n      >\n        <View style={styles.row}>\n          {React.isValidElement(icon) && (\n            <View style={[styles.item, styles.icon]} pointerEvents=\"box-none\">\n              {icon}\n            </View>\n          )}\n          <View\n            style={[styles.item, styles.content, icon != null ? styles.widthWithIcon : undefined]}\n            pointerEvents=\"none\"\n          >\n            <Text numberOfLines={1} style={[styles.title, titleColor, titleStyle]}>\n              {title}\n            </Text>\n          </View>\n        </View>\n      </Touchable>\n    );\n  }\n}\n\nconst minWidth = 112;\nconst maxWidth = 280;\nconst iconWidth = 25;\n\nconst styles = StyleSheet.create({\n  container: {\n    paddingHorizontal: 8,\n    minWidth,\n    maxWidth,\n    height: 48,\n    justifyContent: 'center',\n  },\n  row: {\n    flexDirection: 'row',\n  },\n  icon: {\n    width: iconWidth,\n  },\n  title: {\n    fontSize: 16,\n  },\n  item: {\n    marginHorizontal: 8,\n  },\n  content: {\n    justifyContent: 'center',\n    minWidth: minWidth - 16,\n    maxWidth: maxWidth - 16,\n  },\n  widthWithIcon: {\n    maxWidth: maxWidth - (iconWidth + 48),\n  },\n  disabledColor: {\n    color: 'rgba(0, 0, 0, 0.32)',\n  },\n  normalColor: {\n    color: 'rgba(0, 0, 0, 0.87)',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}