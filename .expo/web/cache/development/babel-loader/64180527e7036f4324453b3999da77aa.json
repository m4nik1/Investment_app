{"ast":null,"code":"import * as React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ActionSheetIOS from \"react-native-web/dist/exports/ActionSheetIOS\";\nimport UIManager from \"react-native-web/dist/exports/UIManager\";\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { HiddenItem } from \"./HeaderItems\";\nimport invariant from 'invariant';\nexport var extractOverflowButtonData = function extractOverflowButtonData(hiddenButtons) {\n  var detectedElementTypes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [HiddenItem];\n\n  try {\n    return doExtractOverflowButtonData(hiddenButtons, detectedElementTypes);\n  } catch (err) {\n    throw new Error(\"There was an error extracting overflow button data from children of OverflowMenu.\\n      It's possible you didn't follow the limitation rules documented in readme.\\n      The nested error is: \" + err.message);\n  }\n};\n\nfunction doExtractOverflowButtonData(hiddenButtons, detectedElementTypes) {\n  var btnsData = React.Children.toArray(hiddenButtons).map(function (button) {\n    var props = button.props,\n        type = button.type;\n\n    if (detectedElementTypes.includes(type)) {\n      return extract(button);\n    }\n\n    if (typeof type === 'function') {\n      var nestedElement = type(props);\n\n      if (nestedElement && detectedElementTypes.includes(nestedElement.type)) {\n        return extract(nestedElement);\n      }\n    }\n\n    return false;\n  });\n  return btnsData.filter(Boolean);\n}\n\nvar extract = function extract(element) {\n  var _element$props = element.props,\n      title = _element$props.title,\n      onPress = _element$props.onPress,\n      disabled = _element$props.disabled,\n      destructive = _element$props.destructive;\n  return disabled === true ? false : {\n    title: title,\n    onPress: onPress,\n    destructive: destructive\n  };\n};\n\nvar checkParams = function checkParams(hiddenButtons) {\n  invariant(Array.isArray(hiddenButtons), 'hiddenButtons must be an array');\n};\n\nexport var overflowMenuPressHandlerActionSheet = function overflowMenuPressHandlerActionSheet(_ref) {\n  var hiddenButtons = _ref.hiddenButtons,\n      _ref$cancelButtonLabe = _ref.cancelButtonLabel,\n      cancelButtonLabel = _ref$cancelButtonLabe === void 0 ? 'Cancel' : _ref$cancelButtonLabe;\n  checkParams(hiddenButtons);\n  var actionTitles = hiddenButtons.map(function (btn) {\n    return btn.title;\n  });\n  var destructiveActions = hiddenButtons.reduce(function (acc, btn, index) {\n    if (btn.destructive) {\n      acc.push(index + 1);\n    }\n\n    return acc;\n  }, []);\n  actionTitles.unshift(cancelButtonLabel);\n  ActionSheetIOS.showActionSheetWithOptions({\n    options: actionTitles,\n    cancelButtonIndex: 0,\n    destructiveButtonIndex: destructiveActions\n  }, function (buttonIndex) {\n    if (buttonIndex > 0) {\n      hiddenButtons[buttonIndex - 1].onPress();\n    }\n  });\n};\nexport var overflowMenuPressHandlerPopupMenu = function overflowMenuPressHandlerPopupMenu(_ref2) {\n  var hiddenButtons = _ref2.hiddenButtons,\n      overflowButtonRef = _ref2.overflowButtonRef;\n  checkParams(hiddenButtons);\n  UIManager.showPopupMenu(findNodeHandle(overflowButtonRef), hiddenButtons.map(function (btn) {\n    return btn.title;\n  }), function (err) {\n    return console.debug('overflowBtn error', err);\n  }, function (eventName, index) {\n    if (eventName !== 'itemSelected' || typeof index !== 'number') {\n      return;\n    }\n\n    hiddenButtons[index].onPress();\n  });\n};\nexport var overflowMenuPressHandlerDropdownMenu = function overflowMenuPressHandlerDropdownMenu(_ref3) {\n  var children = _ref3.children,\n      overflowButtonRef = _ref3.overflowButtonRef,\n      _private_toggleMenu = _ref3._private_toggleMenu;\n\n  if (overflowButtonRef) {\n    overflowButtonRef.measureInWindow(function (x, y, width) {\n      _private_toggleMenu({\n        elements: children,\n        x: x + width,\n        y: y\n      });\n    });\n  } else {}\n};\nexport var defaultOnOverflowMenuPress = Platform.select({\n  ios: overflowMenuPressHandlerActionSheet,\n  default: overflowMenuPressHandlerDropdownMenu\n});","map":{"version":3,"sources":["C:/Users/manik/Documents/react-native/Investment_app/node_modules/react-navigation-header-buttons/src/overflowMenuPressHandlers.js"],"names":["React","HiddenItem","invariant","extractOverflowButtonData","hiddenButtons","detectedElementTypes","doExtractOverflowButtonData","err","Error","message","btnsData","Children","toArray","map","button","props","type","includes","extract","nestedElement","filter","Boolean","element","title","onPress","disabled","destructive","checkParams","Array","isArray","overflowMenuPressHandlerActionSheet","cancelButtonLabel","actionTitles","btn","destructiveActions","reduce","acc","index","push","unshift","ActionSheetIOS","showActionSheetWithOptions","options","cancelButtonIndex","destructiveButtonIndex","buttonIndex","overflowMenuPressHandlerPopupMenu","overflowButtonRef","UIManager","showPopupMenu","findNodeHandle","console","debug","eventName","overflowMenuPressHandlerDropdownMenu","children","_private_toggleMenu","measureInWindow","x","y","width","elements","defaultOnOverflowMenuPress","Platform","select","ios","default"],"mappings":"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","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { Platform, ActionSheetIOS, UIManager, findNodeHandle, type View } from 'react-native';\nimport { HiddenItem } from './HeaderItems';\nimport invariant from 'invariant';\nimport type { ToggleMenuParam } from './overflowMenu/OverflowMenuContext';\n\ntype OverflowButtonDescriptors = $ReadOnlyArray<{|\n  title: string,\n  onPress: () => void | Promise<void>,\n  destructive?: boolean,\n|}>;\n\nexport const extractOverflowButtonData = (\n  hiddenButtons: React.Node,\n  detectedElementTypes: Array<React.StatelessFunctionalComponent<any>> = [HiddenItem]\n): OverflowButtonDescriptors => {\n  try {\n    return doExtractOverflowButtonData(hiddenButtons, detectedElementTypes);\n  } catch (err) {\n    throw new Error(\n      `There was an error extracting overflow button data from children of OverflowMenu.\n      It's possible you didn't follow the limitation rules documented in readme.\n      The nested error is: ${err.message}`\n    );\n  }\n};\n\nfunction doExtractOverflowButtonData(\n  hiddenButtons,\n  detectedElementTypes\n): OverflowButtonDescriptors {\n  // don't do this at home - this is not how React is meant to be used!\n  const btnsData = React.Children.toArray(hiddenButtons).map((button) => {\n    const { props, type } = button;\n    if (detectedElementTypes.includes(type)) {\n      return extract(button);\n    }\n\n    if (typeof type === 'function') {\n      const nestedElement = type(props);\n      if (nestedElement && detectedElementTypes.includes(nestedElement.type)) {\n        return extract(nestedElement);\n      }\n    }\n    return false;\n  });\n  // $FlowFixMe\n  return btnsData.filter(Boolean);\n}\n\nconst extract = (element: React.Element<any>) => {\n  const {\n    props: { title, onPress, disabled, destructive },\n  } = element;\n  return disabled === true ? false : { title, onPress, destructive };\n};\n\nexport type OnOverflowMenuPressParams = {|\n  hiddenButtons: OverflowButtonDescriptors,\n  _private_toggleMenu: (ToggleMenuParam) => void,\n  overflowButtonRef: null | View,\n  cancelButtonLabel?: string,\n  children: React.Node,\n|};\n\nconst checkParams = (hiddenButtons) => {\n  invariant(Array.isArray(hiddenButtons), 'hiddenButtons must be an array');\n};\n\nexport const overflowMenuPressHandlerActionSheet = ({\n  hiddenButtons,\n  cancelButtonLabel = 'Cancel',\n}: OnOverflowMenuPressParams) => {\n  checkParams(hiddenButtons);\n  let actionTitles = hiddenButtons.map((btn) => btn.title);\n  const destructiveActions: Array<number> = hiddenButtons.reduce((acc, btn, index) => {\n    if (btn.destructive) {\n      acc.push(index + 1);\n    }\n    return acc;\n  }, []);\n  actionTitles.unshift(cancelButtonLabel);\n\n  ActionSheetIOS.showActionSheetWithOptions(\n    {\n      options: actionTitles,\n      cancelButtonIndex: 0,\n      // $FlowFixMe\n      destructiveButtonIndex: destructiveActions,\n    },\n    (buttonIndex: number) => {\n      if (buttonIndex > 0) {\n        hiddenButtons[buttonIndex - 1].onPress();\n      }\n    }\n  );\n};\n\nexport const overflowMenuPressHandlerPopupMenu = ({\n  hiddenButtons,\n  overflowButtonRef,\n}: OnOverflowMenuPressParams) => {\n  checkParams(hiddenButtons);\n\n  UIManager.showPopupMenu(\n    findNodeHandle(overflowButtonRef),\n    hiddenButtons.map((btn) => btn.title),\n    (err) => console.debug('overflowBtn error', err),\n    (eventName: string, index?: number) => {\n      if (eventName !== 'itemSelected' || typeof index !== 'number') {\n        return;\n      }\n      hiddenButtons[index].onPress();\n    }\n  );\n};\n\nexport const overflowMenuPressHandlerDropdownMenu = ({\n  children,\n  overflowButtonRef,\n  _private_toggleMenu,\n}: OnOverflowMenuPressParams) => {\n  if (overflowButtonRef) {\n    overflowButtonRef.measureInWindow((x, y, width) => {\n      _private_toggleMenu({ elements: children, x: x + width, y });\n    });\n  } else {\n    // TODO ignore or show?\n  }\n};\n\nexport const defaultOnOverflowMenuPress = Platform.select({\n  ios: overflowMenuPressHandlerActionSheet,\n  default: overflowMenuPressHandlerDropdownMenu,\n});\n"]},"metadata":{},"sourceType":"module"}