{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _jsxFileName = \"C:\\\\Users\\\\manik\\\\Documents\\\\react-native\\\\Investment_app\\\\node_modules\\\\react-navigation-header-buttons\\\\src\\\\HeaderItems.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport * as React from 'react';\nimport { HeaderButtonsContext } from \"./HeaderButtonsContext\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport { OverflowMenuContext } from \"./overflowMenu/OverflowMenuContext\";\nimport { MenuItem } from \"./overflowMenu/vendor/MenuItem\";\nexport function HiddenItem(_ref) {\n  var destructive = _ref.destructive,\n      onPress = _ref.onPress,\n      otherProps = _objectWithoutProperties(_ref, [\"destructive\", \"onPress\"]);\n\n  var toggleMenu = React.useContext(OverflowMenuContext);\n\n  var onMenuItemPress = function onMenuItemPress() {\n    toggleMenu();\n    onPress && onPress();\n  };\n\n  return React.createElement(MenuItem, _extends({}, otherProps, {\n    onPress: onMenuItemPress,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 10\n    }\n  }));\n}\nexport function Item(props) {\n  var HeaderButtonComponent = React.useContext(HeaderButtonsContext);\n  return React.createElement(HeaderButtonComponent, _extends({}, props, {\n    renderButtonElement: renderVisibleButton,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 10\n    }\n  }));\n}\nexport function renderVisibleButton(visibleButtonProps) {\n  var IconComponent = visibleButtonProps.IconComponent,\n      iconSize = visibleButtonProps.iconSize,\n      color = visibleButtonProps.color,\n      iconName = visibleButtonProps.iconName,\n      title = visibleButtonProps.title,\n      buttonStyle = visibleButtonProps.buttonStyle;\n  return IconComponent && iconName ? React.createElement(IconComponent, {\n    name: iconName,\n    color: color,\n    size: iconSize,\n    style: StyleSheet.compose(styles.button, buttonStyle),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 5\n    }\n  }) : React.createElement(Text, {\n    style: [styles.text, {\n      color: color\n    }, buttonStyle],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 5\n    }\n  }, textTransformer(title));\n}\n\nvar textTransformer = function textTransformer(label) {\n  return Platform.OS === 'ios' ? label.charAt(0).toUpperCase() + label.substr(1) : label.toUpperCase();\n};\n\nvar styles = StyleSheet.create({\n  text: _objectSpread({}, Platform.select({\n    android: {\n      fontFamily: 'sans-serif-medium',\n      fontSize: 14,\n      marginHorizontal: 11\n    },\n    default: {\n      fontSize: 17,\n      marginHorizontal: 10\n    }\n  })),\n  button: {\n    marginHorizontal: 11\n  }\n});","map":{"version":3,"sources":["C:/Users/manik/Documents/react-native/Investment_app/node_modules/react-navigation-header-buttons/src/HeaderItems.js"],"names":["React","HeaderButtonsContext","OverflowMenuContext","MenuItem","HiddenItem","destructive","onPress","otherProps","toggleMenu","useContext","onMenuItemPress","Item","props","HeaderButtonComponent","renderVisibleButton","visibleButtonProps","IconComponent","iconSize","color","iconName","title","buttonStyle","StyleSheet","compose","styles","button","text","textTransformer","label","Platform","OS","charAt","toUpperCase","substr","create","select","android","fontFamily","fontSize","marginHorizontal","default"],"mappings":";;;;;;;;;AACA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AAGA,SAASC,oBAAT;;;;AAEA,SAASC,mBAAT;AACA,SAASC,QAAT;AAOA,OAAO,SAASC,UAAT,OAA8E;AAAA,MAAxDC,WAAwD,QAAxDA,WAAwD;AAAA,MAA3CC,OAA2C,QAA3CA,OAA2C;AAAA,MAA/BC,UAA+B;;AACnF,MAAMC,UAAU,GAAGR,KAAK,CAACS,UAAN,CAAiBP,mBAAjB,CAAnB;;AAKA,MAAMQ,eAAe,GAAG,SAAlBA,eAAkB,GAAM;AAC5BF,IAAAA,UAAU;AACVF,IAAAA,OAAO,IAAIA,OAAO,EAAlB;AACD,GAHD;;AAKA,SAAO,oBAAC,QAAD,eAAcC,UAAd;AAA0B,IAAA,OAAO,EAAEG,eAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AAGD,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAgC;AACrC,MAAMC,qBAAqB,GAAGb,KAAK,CAACS,UAAN,CAAiBR,oBAAjB,CAA9B;AAGA,SAAO,oBAAC,qBAAD,eAA2BW,KAA3B;AAAkC,IAAA,mBAAmB,EAAEE,mBAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAP;AACD;AAED,OAAO,SAASA,mBAAT,CAA6BC,kBAA7B,EAAyF;AAAA,MACtFC,aADsF,GACrBD,kBADqB,CACtFC,aADsF;AAAA,MACvEC,QADuE,GACrBF,kBADqB,CACvEE,QADuE;AAAA,MAC7DC,KAD6D,GACrBH,kBADqB,CAC7DG,KAD6D;AAAA,MACtDC,QADsD,GACrBJ,kBADqB,CACtDI,QADsD;AAAA,MAC5CC,KAD4C,GACrBL,kBADqB,CAC5CK,KAD4C;AAAA,MACrCC,WADqC,GACrBN,kBADqB,CACrCM,WADqC;AAG9F,SAAOL,aAAa,IAAIG,QAAjB,GACL,oBAAC,aAAD;AACE,IAAA,IAAI,EAAEA,QADR;AAEE,IAAA,KAAK,EAAED,KAFT;AAGE,IAAA,IAAI,EAAED,QAHR;AAIE,IAAA,KAAK,EAAEK,UAAU,CAACC,OAAX,CAAmBC,MAAM,CAACC,MAA1B,EAAkCJ,WAAlC,CAJT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAQL,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE,CAACG,MAAM,CAACE,IAAR,EAAc;AAAER,MAAAA,KAAK,EAALA;AAAF,KAAd,EAAyBG,WAAzB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAqDM,eAAe,CAACP,KAAD,CAApE,CARF;AAUD;;AAED,IAAMO,eAAe,GAAG,SAAlBA,eAAkB,CAACC,KAAD;AAAA,SACtBC,QAAQ,CAACC,EAAT,KAAgB,KAAhB,GAAwBF,KAAK,CAACG,MAAN,CAAa,CAAb,EAAgBC,WAAhB,KAAgCJ,KAAK,CAACK,MAAN,CAAa,CAAb,CAAxD,GAA0EL,KAAK,CAACI,WAAN,EADpD;AAAA,CAAxB;;AAGA,IAAMR,MAAM,GAAGF,UAAU,CAACY,MAAX,CAAkB;AAC/BR,EAAAA,IAAI,oBACCG,QAAQ,CAACM,MAAT,CAAgB;AACjBC,IAAAA,OAAO,EAAE;AACPC,MAAAA,UAAU,EAAE,mBADL;AAEPC,MAAAA,QAAQ,EAAE,EAFH;AAGPC,MAAAA,gBAAgB,EAAE;AAHX,KADQ;AAMjBC,IAAAA,OAAO,EAAE;AACPF,MAAAA,QAAQ,EAAE,EADH;AAEPC,MAAAA,gBAAgB,EAAE;AAFX;AANQ,GAAhB,CADD,CAD2B;AAc/Bd,EAAAA,MAAM,EAAE;AACNc,IAAAA,gBAAgB,EAAE;AADZ;AAduB,CAAlB,CAAf","sourcesContent":["// @flow\nimport * as React from 'react';\nimport { type ItemProps, type VisibleButtonProps } from './HeaderButton';\nimport { type Props as MenuItemProps } from './overflowMenu/vendor/MenuItem';\nimport { HeaderButtonsContext } from './HeaderButtonsContext';\nimport { Text, StyleSheet, Platform } from 'react-native';\nimport { OverflowMenuContext } from './overflowMenu/OverflowMenuContext';\nimport { MenuItem } from './overflowMenu/vendor/MenuItem';\n\ntype HiddenItemProps = {|\n  ...MenuItemProps,\n  destructive?: boolean,\n|};\n\nexport function HiddenItem({ destructive, onPress, ...otherProps }: HiddenItemProps) {\n  const toggleMenu = React.useContext(OverflowMenuContext);\n\n  // when rendering dropdown menu (e.g. android default) the return value is actually rendered\n  // when we show action sheet, we do not render the returned value,\n  // but just extract title, onPress and destructive passed to HiddenItem. HiddenItem() is not called\n  const onMenuItemPress = () => {\n    toggleMenu();\n    onPress && onPress();\n  };\n\n  return <MenuItem {...otherProps} onPress={onMenuItemPress} />;\n}\n\n// TODO check RTL\nexport function Item(props: ItemProps) {\n  const HeaderButtonComponent = React.useContext(HeaderButtonsContext);\n  // HeaderButtonComponent knows iconSize, icon color and etc.\n  // Item itself will likely only have title and onPress\n  return <HeaderButtonComponent {...props} renderButtonElement={renderVisibleButton} />;\n}\n\nexport function renderVisibleButton(visibleButtonProps: VisibleButtonProps): React.Element<any> {\n  const { IconComponent, iconSize, color, iconName, title, buttonStyle } = visibleButtonProps;\n\n  return IconComponent && iconName ? (\n    <IconComponent\n      name={iconName}\n      color={color}\n      size={iconSize}\n      style={StyleSheet.compose(styles.button, buttonStyle)}\n    />\n  ) : (\n    <Text style={[styles.text, { color }, buttonStyle]}>{textTransformer(title)}</Text>\n  );\n}\n\nconst textTransformer = (label: string) =>\n  Platform.OS === 'ios' ? label.charAt(0).toUpperCase() + label.substr(1) : label.toUpperCase();\n\nconst styles = StyleSheet.create({\n  text: {\n    ...Platform.select({\n      android: {\n        fontFamily: 'sans-serif-medium',\n        fontSize: 14,\n        marginHorizontal: 11,\n      },\n      default: {\n        fontSize: 17,\n        marginHorizontal: 10,\n      },\n    }),\n  },\n  button: {\n    marginHorizontal: 11,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}